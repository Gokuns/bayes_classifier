rnors(1)
rnorm(1)
set.seed(421)
rnorm(1)
rnorm(2)
set.seed(421)
class_means
class_means <- c(-3, -1, 3)
knitr::opts_chunk$set(echo = TRUE)
class_deviations <- c(1.2, 1.0, 1.3)
class_sizes <- c(40, 30, 50)
points1 <- rnorm(n = class_sizes[1], mean = class_means[1], sd = class_deviations[1])
points2 <- rnorm(n = class_sizes[2], mean = class_means[2], sd = class_deviations[2])
points3 <- rnorm(n = class_sizes[3], mean = class_means[3], sd = class_deviations[3])
x <- c(points1, points2, points3)
points1
points3
x
write.csv(x = cbind(x, y), file = "lab01_data_set.csv", row.names = FALSE)
y <- c(rep(1, class_sizes[1]), rep(2, class_sizes[2]), rep(3, class_sizes[3]))
y
write.csv(x = cbind(x, y), file = "lab01_data_set.csv", row.names = FALSE)
cbind(x,y)
density1 <- dnorm(data_interval, mean = class_means[1], sd = class_deviations[1])
data_interval <- seq(from = -7, to = +7, by = 0.01)
data_interval
density1 <- dnorm(data_interval, mean = class_means[1], sd = class_deviations[1])
density1
plot(data_interval, density1, type = "l", col = "red", lwd = 2,
density2 <- dnorm(data_interval, mean = class_means[2], sd = class_deviations[2])
density3 <- dnorm(data_interval, mean = class_means[3], sd = class_deviations[3])
density3 <- dnorm(data_interval, mean = class_means[3], sd = class_deviations[3])
plot(data_interval, density1, type = "l", col = "red", lwd = 2,
ylim = c(-0.03, max(density1, density2, density3)),
xlab = "x", ylab = "density", las = 1)
plot(data_interval, density1, type = "l", col = "red", lwd = 2,
ylim = c(-0.03, max(density1, density2, density3)),
xlab = "x", ylab = "density", las = 1)
density2 <- dnorm(data_interval, mean = class_means[2], sd = class_deviations[2])
plot(data_interval, density1, type = "l", col = "red", lwd = 2,
ylim = c(-0.03, max(density1, density2, density3)),
xlab = "x", ylab = "density", las = 1)
points(data_interval, density2, type = "l", col = "green", lwd = 2)
# plot densities used and data points generated together
data_interval <- seq(from = -7, to = +7, by = 0.01)
density1 <- dnorm(data_interval, mean = class_means[1], sd = class_deviations[1])
density2 <- dnorm(data_interval, mean = class_means[2], sd = class_deviations[2])
density3 <- dnorm(data_interval, mean = class_means[3], sd = class_deviations[3])
plot(data_interval, density1, type = "l", col = "red", lwd = 2,
ylim = c(-0.03, max(density1, density2, density3)),
xlab = "x", ylab = "density", las = 1)
points(data_interval, density2, type = "l", col = "green", lwd = 2)
points(data_interval, density3, type = "l", col = "blue", lwd = 2)
points(points1, rep(-0.01, class_sizes[1]), type = "p", pch = 19, col = "red")
points(points2, rep(-0.02, class_sizes[2]), type = "p", pch = 19, col = "green")
points(points3, rep(-0.03, class_sizes[3]), type = "p", pch = 19, col = "blue")
data_set <- read.csv("lab01_data_set.csv")
x <- data_set$x
y <- data_set$y
K <- max(y)
N <- length(y)
y==c
sample_means <- sapply(X = 1:K, FUN = function(c) {mean(x[y == c])})
y==c
y
c
y==1
y==c
y==1
K <- max(y)
# get number of classes and number of samples
K <- max(y)
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
x <- data_set$x
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
data_set <- read.csv("lab01_data_set.csv")
install.packages("MASS")
---
title: 'Lab03: Linear Discrimination'
author: "Mehmet GÃ¶nen"
date: "October 8, 2018"
output: html_document
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
safelog <- function(x) {
x[x == 0] <- 1
return (log(x))
}
## Parameters
```{r}
set.seed(421)
# mean parameters
class_means <- matrix(c(+1.5, +1.5, -1.5, -1.5), 2, 2)
# covariance parameters
class_covariances <- array(c(+1.6, +1.2, +1.2, +1.6,
+1.6, -1.2, -1.2, +1.6), c(2, 2, 2))
# sample sizes
class_sizes <- c(120, 180)
## Data Generation
```{r}
# generate random samples
points1 <- mvrnorm(n = class_sizes[1], mu = class_means[,1], Sigma = class_covariances[,,1])
points2 <- mvrnorm(n = class_sizes[2], mu = class_means[,2], Sigma = class_covariances[,,2])
X <- rbind(points1, points2)
colnames(X) <- c("x1", "x2")
# generate corresponding labels
y <- c(rep(1, class_sizes[1]), rep(0, class_sizes[2]))
# write data to a file
write.csv(x = cbind(X, y), file = "lab03_data_set.csv", row.names = FALSE)
# plot data points generated
plot(points1[,1], points1[,2], type = "p", pch = 19, col = "red", las = 1,
xlim = c(-6, 6), ylim = c(-6, 6),
xlab = "x1", ylab = "x2")
points(points2[,1], points2[,2], type = "p", pch = 19, col = "blue")
---
title: 'Lab03: Linear Discrimination'
author: "Mehmet GÃ¶nen"
date: "October 8, 2018"
output: html_document
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
safelog <- function(x) {
x[x == 0] <- 1
return (log(x))
}
```
## Parameters
```{r}
set.seed(421)
# mean parameters
class_means <- matrix(c(+1.5, +1.5, -1.5, -1.5), 2, 2)
# covariance parameters
class_covariances <- array(c(+1.6, +1.2, +1.2, +1.6,
+1.6, -1.2, -1.2, +1.6), c(2, 2, 2))
# sample sizes
class_sizes <- c(120, 180)
```
## Data Generation
```{r}
# generate random samples
points1 <- mvrnorm(n = class_sizes[1], mu = class_means[,1], Sigma = class_covariances[,,1])
points2 <- mvrnorm(n = class_sizes[2], mu = class_means[,2], Sigma = class_covariances[,,2])
X <- rbind(points1, points2)
colnames(X) <- c("x1", "x2")
# generate corresponding labels
y <- c(rep(1, class_sizes[1]), rep(0, class_sizes[2]))
```
## Exporting Data
```{r}
# write data to a file
write.csv(x = cbind(X, y), file = "lab03_data_set.csv", row.names = FALSE)
```
## Plotting Data
```{r, fig.height = 8, fig.width = 8}
# plot data points generated
plot(points1[,1], points1[,2], type = "p", pch = 19, col = "red", las = 1,
xlim = c(-6, 6), ylim = c(-6, 6),
xlab = "x1", ylab = "x2")
points(points2[,1], points2[,2], type = "p", pch = 19, col = "blue")
```
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
safelog <- function(x) {
x[x == 0] <- 1
return (log(x))
}
set.seed(421)
# mean parameters
class_means <- matrix(c(+15, +1.5, -1.5, -1.5), 2, 2)
# covariance parameters
class_covariances <- array(c(+1.6, +1.2, +1.2, +1.6,
+1.6, -1.2, -1.2, +1.6), c(2, 2, 2))
# sample sizes
class_sizes <- c(120, 180)
# generate random samples
points1 <- mvrnorm(n = class_sizes[1], mu = class_means[,1], Sigma = class_covariances[,,1])
points2 <- mvrnorm(n = class_sizes[2], mu = class_means[,2], Sigma = class_covariances[,,2])
X <- rbind(points1, points2)
colnames(X) <- c("x1", "x2")
# generate corresponding labels
y <- c(rep(1, class_sizes[1]), rep(0, class_sizes[2]))
# write data to a file
write.csv(x = cbind(X, y), file = "lab03_data_set.csv", row.names = FALSE)
# plot data points generated
plot(points1[,1], points1[,2], type = "p", pch = 19, col = "red", las = 1,
xlim = c(-6, 6), ylim = c(-6, 6),
xlab = "x1", ylab = "x2")
points(points2[,1], points2[,2], type = "p", pch = 19, col = "blue")
# read data into memory
data_set <- read.csv("lab03_data_set.csv")
# get X and y values
X <- cbind(data_set$x1, data_set$x2)
y_truth <- data_set$y
# get number of samples
N <- length(y_truth)
---
title: 'Lab03: Linear Discrimination'
author: "Mehmet GÃ¶nen"
date: "October 8, 2018"
output: html_document
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
safelog <- function(x) {
x[x == 0] <- 1
return (log(x))
}
```
## Parameters
```{r}
set.seed(421)
# mean parameters
class_means <- matrix(c(+1.5, +1.5, -1.5, -1.5), 2, 2)
# covariance parameters
class_covariances <- array(c(+1.6, +1.2, +1.2, +1.6,
+1.6, -1.2, -1.2, +1.6), c(2, 2, 2))
# sample sizes
class_sizes <- c(120, 180)
```
## Data Generation
```{r}
# generate random samples
points1 <- mvrnorm(n = class_sizes[1], mu = class_means[,1], Sigma = class_covariances[,,1])
points2 <- mvrnorm(n = class_sizes[2], mu = class_means[,2], Sigma = class_covariances[,,2])
X <- rbind(points1, points2)
colnames(X) <- c("x1", "x2")
# generate corresponding labels
y <- c(rep(1, class_sizes[1]), rep(0, class_sizes[2]))
```
## Exporting Data
```{r}
# write data to a file
write.csv(x = cbind(X, y), file = "lab03_data_set.csv", row.names = FALSE)
```
## Plotting Data
```{r, fig.height = 8, fig.width = 8}
# plot data points generated
plot(points1[,1], points1[,2], type = "p", pch = 19, col = "red", las = 1,
xlim = c(-6, 6), ylim = c(-6, 6),
xlab = "x1", ylab = "x2")
points(points2[,1], points2[,2], type = "p", pch = 19, col = "blue")
```
# read data into memory
data_set <- read.csv("lab03_data_set.csv")
# get X and y values
X <- cbind(data_set$x1, data_set$x2)
y_truth <- data_set$y
# get number of samples
N <- length(y_truth)
# read data into memory
data_set <- read.csv("lab03_data_set.csv")
# get X and y values
X <- cbind(data_set$x1, data_set$x2)
y_truth <- data_set$y
# get number of samples
N <- length(y_truth)
# read data into memory
data_set <- read.csv("lab03_data_set.csv")
# get X and y values
X <- cbind(data_set$x1, data_set$x2)
y_truth <- data_set$y
# get number of samples
N <- length(y_truth)
# read data into memory
data_set <- read.csv("lab03_data_set.csv")
# get X and y values
X <- cbind(data_set$x1, data_set$x2)
View(X)
View(X)
View(data_set)
View(data_set)
View(X)
# read data into memory
data_set <- read.csv("hw01_data_set_images")
# selecting the training data
train_a <- data_set.slice(iris, 0:25)
# selecting the training data
train_a <- slice(data_set), 0:25)
# selecting the training data
train_a <- slice(data_set, 0:25)
# selecting the training data
train_a <- data_set[c(1,5:10)]
# read data into memory
data_set <- read.csv("hw01_data_set_images")
# selecting the training data
train_a <- data_set[c(1,5:10)]
# read data into memory
data_set <- read.csv("hw01_data_set_images")
# selecting the training data
train_a <- data_set[c(1,5:10)]
# read data into memory
data_set <- read.csv("hw01_data_set_images")
setwd("C:/Users/Goko/Desktop/hw01")
# selecting the training data
train_a <- data_set[c(1,5:10)]
# read data into memory
data_set <- read.csv("hw01_data_set_images")
directory <- ("./specdata/")
# read data into memory
data_set <- read.csv("hw01_data_set_images")
